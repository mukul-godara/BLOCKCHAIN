const Websocket = require('ws');
const P2P_PORT = process.env.P2P_PORT || 5001;
const peers = process.env.PEERS ? process.env.PEERS.split(',') : [];

class P2pServer {
  constructor(blockchain) {
    this.blockchain = blockchain;
    this.sockets = [];
  }

  listen() {
    const server = new Websocket.Server({ port: P2P_PORT });
    server.on('connection', socket => this.connectSocket(socket));
    
    this.connectToPeers();
    console.log(`Listening for peer-to-peer connections on : ${P2P_PORT}`);
  }

  connectToPeers() {
    peers.forEach(peer => {
      const socket = new Websocket(peer);

      socket.on('open', () => this.connectSocket(socket));
    });
  }
//} 

  connectSocket(socket) {
    this.sockets.push(socket);
    console.log('Socket connected');
  }
// staring round two
  

connectSocket(socket) {
  this.sockets.push(socket);
  console.log('Socket connected');
  this.messageHandler(socket);
  //socket send a string , so we converted the blockhian.chain to string using json stringfy method 
  //socket.send(JSON.stringify(this.blockchain.chain));
  this.sendChain(socket);
}  

// messageHandler(socket) { 
// 	socket.on('message', message => {
//     const data = JSON.parse(message);
//     console.log('data', data);
//   });
// }
messageHandler(socket) {
	socket.on('message', message => {
    const data = JSON.parse(message);
    this.blockchain.replaceChain(data);
  });
}
sendChain(socket) {
	socket.send(JSON.stringify(this.blockchain.chain));
}

syncChains() {
  this.sockets.forEach(socket => {
    this.sockets.forEach(socket => this.sendChain(socket));
  });
}
}


module.exports = P2pServer;

// node_modules/.bin/cross-env HTTP_PORT=3003 P2P_PORT=5003 PEERS="ws://localhost:5001,ws://localhost:5002" npm run dev
